generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id             Int             @id @default(autoincrement())
  username            String          @unique
  email               String          @unique
  password_hash       String
  first_name          String?
  last_name           String?
  bio                 String?
  profile_picture_url String?
  social_links        Json?
  address             String?
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  events              Event[]         @relation("UserEvents")
  participants        Participant[]
  notifications       Notification[]
  userOperations      UserOperation[]
}

model Event {
  event_id       Int             @id @default(autoincrement())
  user_id        Int
  name           String
  description    String?
  date           DateTime
  start_time     DateTime
  end_time       DateTime?
  location       String?
  pricing_info   Float?
  thumbnail_url  String?
  capacity       Int?
  state          EventState      @default(DRAFT)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  user           User            @relation("UserEvents", fields: [user_id], references: [user_id])
  participants   Participant[]
  categories     EventCategory[]
  notifications  Notification[]
  userOperations UserOperation[]
}

model EventCategory {
  event_id    Int
  category_id Int
  event       Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [category_id])

  @@id([event_id, category_id])
}

model Category {
  category_id Int             @id @default(autoincrement())
  name        String          @unique
  events      EventCategory[]
}

model Participant {
  participant_id Int      @id @default(autoincrement())
  user_id        Int
  event_id       Int
  rsvp_date      DateTime @default(now())
  user           User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  event          Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
}

model Notification {
  notification_id   Int      @id @default(autoincrement())
  user_id           Int
  event_id          Int
  notification_type String
  sent_at           DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [user_id])
  event             Event    @relation(fields: [event_id], references: [event_id])
}

model UserOperation {
  operation_id      Int           @id @default(autoincrement())
  user_id           Int
  event_id          Int?
  operation_type    OperationType
  operation_details Json?
  created_at        DateTime      @default(now())
  user              User          @relation(fields: [user_id], references: [user_id])
  event             Event?        @relation(fields: [event_id], references: [event_id])
}

enum EventState {
  PUBLISHED
  DRAFT
  CANCELLED
}

enum OperationType {
  VIEW
  CREATE
  EDIT
  DELETE
  RSVP
  CANCEL_RSVP
  LOGIN
  LOGOUT
  UPDATE_PROFILE
  CHANGE_PASSWORD
  DELETE_ACCOUNT
  PUBLISH
  DRAFT
  CANCEL
  SEARCH
  FILTER
  MARK_NOTIFICATION_AS_READ
  DELETE_NOTIFICATION
}
